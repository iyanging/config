# Generated by https://github.com/Wirena/clang-format-configurator-v2

---
AccessModifierOffset: -4
AlignAfterOpenBracket: BlockIndent
UseTab: Never
UseCRLF: false
TabWidth: 4
Standard: Latest
SpacesInSquareBrackets: false
SpacesInParentheses: false
SpacesInLineCommentPrefix:
  Minimum: 1
  Maximum: -1
SpacesInConditionalStatement: false
SpacesInCStyleCastParentheses: false
SpacesInAngles: Never
SpacesBeforeTrailingComments: 2
SpaceInEmptyParentheses: false
SpaceInEmptyBlock: false
SpaceBeforeSquareBrackets: false
SpaceBeforeRangeBasedForLoopColon: true
SpaceBeforeParens: ControlStatementsExceptControlMacros
SpaceBeforeInheritanceColon: true
SpaceBeforeCtorInitializerColon: true
SpaceBeforeCpp11BracedList: false
SpaceBeforeCaseColon: false
SpaceBeforeAssignmentOperators: true
SpaceAroundPointerQualifiers: Default
SpaceAfterTemplateKeyword: true
SpaceAfterLogicalNot: true
SpaceAfterCStyleCast: true
SortUsingDeclarations: true
SortIncludes: Never
SeparateDefinitionBlocks: Always
RequiresClausePosition: SingleLine
ReflowComments: true
ReferenceAlignment: Pointer
QualifierAlignment: Left
PointerAlignment: Right
PackConstructorInitializers: CurrentLine
PPIndentWidth: 4
NamespaceIndentation: Inner
MaxEmptyLinesToKeep: 1
LambdaBodyIndentation: Signature
KeepEmptyLinesAtTheStartOfBlocks: false
InsertTrailingCommas: Wrapped
IndentWrappedFunctionNames: false
IndentWidth: 4
IndentRequiresClause: true
IndentPPDirectives: AfterHash
IndentGotoLabels: true
IndentExternBlock: AfterExternBlock
IndentCaseLabels: false
IndentCaseBlocks: false
IndentAccessModifiers: false
FixNamespaceComments: true
EmptyLineAfterAccessModifier: Never
EmptyLineBeforeAccessModifier: LogicalBlock
DerivePointerAlignment: false
DeriveLineEnding: false
Cpp11BracedListStyle: true
ContinuationIndentWidth: 4
ConstructorInitializerIndentWidth: 4
CompactNamespaces: false
ColumnLimit: 88
BreakStringLiterals: true
BreakInheritanceList: AfterColon
BreakConstructorInitializers: AfterColon
BreakBeforeTernaryOperators: true
BreakBeforeConceptDeclarations: Allowed
BreakBeforeBraces: Custom
BreakBeforeBinaryOperators: NonAssignment
BraceWrapping:
  AfterCaseLabel: false
  AfterClass: true
  AfterControlStatement: Always
  AfterEnum: true
  AfterFunction: true
  AfterNamespace: false
  AfterStruct: true
  AfterUnion: true
  AfterExternBlock: true
  BeforeCatch: true
  BeforeElse: true
  BeforeLambdaBody: false
  BeforeWhile: true
  IndentBraces: false
  SplitEmptyFunction: false
  SplitEmptyRecord: false
  SplitEmptyNamespace: false
BitFieldColonSpacing: Both
BinPackParameters: false
BinPackArguments: false
AlwaysBreakTemplateDeclarations: MultiLine
AlwaysBreakBeforeMultilineStrings: false
AlwaysBreakAfterReturnType: None
AlwaysBreakAfterDefinitionReturnType: None
AllowShortLoopsOnASingleLine: false
AllowShortLambdasOnASingleLine: All
AllowShortIfStatementsOnASingleLine: Never
AllowShortFunctionsOnASingleLine: Inline
AllowShortEnumsOnASingleLine: true
AllowShortCaseLabelsOnASingleLine: true
AllowShortBlocksOnASingleLine: Empty
AllowAllParametersOfDeclarationOnNextLine: false
AllowAllArgumentsOnNextLine: false
AlignTrailingComments: true
AlignOperands: Align
AlignEscapedNewlines: Left
AlignConsecutiveMacros:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: true
  AlignCompound: true
  PadOperators: true
AlignConsecutiveDeclarations:
  Enabled: true
  AlignCompound: true
  PadOperators: true
  AcrossComments: true
  AcrossEmptyLines: false
AlignConsecutiveBitFields:
  PadOperators: true
  AlignCompound: true
  AcrossComments: true
  AcrossEmptyLines: false
  Enabled: true
AlignConsecutiveAssignments:
  PadOperators: true
  AlignCompound: true
  AcrossComments: true
  AcrossEmptyLines: false
  Enabled: true
AlignArrayOfStructures: Right
SpaceBeforeParensOptions: {}
